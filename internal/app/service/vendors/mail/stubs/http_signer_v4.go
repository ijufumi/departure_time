// Code generated by mockery v2.15.0. DO NOT EDIT.

package stubs

import (
	context "context"

	aws "github.com/aws/aws-sdk-go-v2/aws"

	http "net/http"

	mock "github.com/stretchr/testify/mock"

	time "time"

	v4 "github.com/aws/aws-sdk-go-v2/aws/signer/v4"
)

// HTTPSignerV4 is an autogenerated mock type for the HTTPSignerV4 type
type HTTPSignerV4 struct {
	mock.Mock
}

// SignHTTP provides a mock function with given fields: ctx, credentials, r, payloadHash, service, region, signingTime, optFns
func (_m *HTTPSignerV4) SignHTTP(ctx context.Context, credentials aws.Credentials, r *http.Request, payloadHash string, service string, region string, signingTime time.Time, optFns ...func(*v4.SignerOptions)) error {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, credentials, r, payloadHash, service, region, signingTime)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, aws.Credentials, *http.Request, string, string, string, time.Time, ...func(*v4.SignerOptions)) error); ok {
		r0 = rf(ctx, credentials, r, payloadHash, service, region, signingTime, optFns...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewHTTPSignerV4 interface {
	mock.TestingT
	Cleanup(func())
}

// NewHTTPSignerV4 creates a new instance of HTTPSignerV4. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHTTPSignerV4(t mockConstructorTestingTNewHTTPSignerV4) *HTTPSignerV4 {
	mock := &HTTPSignerV4{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
